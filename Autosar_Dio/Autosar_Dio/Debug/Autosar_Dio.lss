
Autosar_Dio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000276  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b36  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000519  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000555  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000265f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  7a:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_ReadChannel>:
        /* Report Error */

#endif
    }
    return Local_DioReturnValue;
}
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <Dio_ReadChannel+0x6>
  86:	5d c0       	rjmp	.+186    	; 0x142 <Dio_ReadChannel+0xc0>
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	ee 0f       	add	r30, r30
  8e:	ff 1f       	adc	r31, r31
  90:	e8 0f       	add	r30, r24
  92:	f9 1f       	adc	r31, r25
  94:	ec 59       	subi	r30, 0x9C	; 156
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	20 81       	ld	r18, Z
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	c9 f0       	breq	.+50     	; 0xd0 <Dio_ReadChannel+0x4e>
  9e:	28 f0       	brcs	.+10     	; 0xaa <Dio_ReadChannel+0x28>
  a0:	22 30       	cpi	r18, 0x02	; 2
  a2:	49 f1       	breq	.+82     	; 0xf6 <Dio_ReadChannel+0x74>
  a4:	23 30       	cpi	r18, 0x03	; 3
  a6:	d1 f1       	breq	.+116    	; 0x11c <Dio_ReadChannel+0x9a>
  a8:	4e c0       	rjmp	.+156    	; 0x146 <Dio_ReadChannel+0xc4>
  aa:	29 b3       	in	r18, 0x19	; 25
  ac:	fc 01       	movw	r30, r24
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	8e 0f       	add	r24, r30
  b4:	9f 1f       	adc	r25, r31
  b6:	fc 01       	movw	r30, r24
  b8:	ec 59       	subi	r30, 0x9C	; 156
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	82 2f       	mov	r24, r18
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 80       	ldd	r0, Z+1	; 0x01
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dio_ReadChannel+0x46>
  c4:	95 95       	asr	r25
  c6:	87 95       	ror	r24
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dio_ReadChannel+0x42>
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	26 b3       	in	r18, 0x16	; 22
  d2:	fc 01       	movw	r30, r24
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	8e 0f       	add	r24, r30
  da:	9f 1f       	adc	r25, r31
  dc:	fc 01       	movw	r30, r24
  de:	ec 59       	subi	r30, 0x9C	; 156
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	82 2f       	mov	r24, r18
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 80       	ldd	r0, Z+1	; 0x01
  e8:	02 c0       	rjmp	.+4      	; 0xee <Dio_ReadChannel+0x6c>
  ea:	95 95       	asr	r25
  ec:	87 95       	ror	r24
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <Dio_ReadChannel+0x68>
  f2:	81 70       	andi	r24, 0x01	; 1
  f4:	08 95       	ret
  f6:	23 b3       	in	r18, 0x13	; 19
  f8:	fc 01       	movw	r30, r24
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	8e 0f       	add	r24, r30
 100:	9f 1f       	adc	r25, r31
 102:	fc 01       	movw	r30, r24
 104:	ec 59       	subi	r30, 0x9C	; 156
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	82 2f       	mov	r24, r18
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 80       	ldd	r0, Z+1	; 0x01
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Dio_ReadChannel+0x92>
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <Dio_ReadChannel+0x8e>
 118:	81 70       	andi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	20 b3       	in	r18, 0x10	; 16
 11e:	fc 01       	movw	r30, r24
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	8e 0f       	add	r24, r30
 126:	9f 1f       	adc	r25, r31
 128:	fc 01       	movw	r30, r24
 12a:	ec 59       	subi	r30, 0x9C	; 156
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	82 2f       	mov	r24, r18
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	02 c0       	rjmp	.+4      	; 0x13a <Dio_ReadChannel+0xb8>
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <Dio_ReadChannel+0xb4>
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret

0000014a <Dio_WritePort>:

FUNC(void, DIO_MEM_CLASS) Dio_WritePort( VAR(Dio_PortType, DIO_MEM_CLASS) PortId , VAR(Dio_PortLevelType, DIO_MEM_CLASS) Level)
{
    /* Check if valid Channel Id */
    if( PortId < DIO_CONFIGURED_PORTS )
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	f0 f4       	brcc	.+60     	; 0x18a <Dio_WritePort+0x40>
    {
        if ( DioPorts[PortId].PortDirection == STD_OUT )
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e0 5a       	subi	r30, 0xA0	; 160
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	21 81       	ldd	r18, Z+1	; 0x01
 15c:	21 11       	cpse	r18, r1
 15e:	15 c0       	rjmp	.+42     	; 0x18a <Dio_WritePort+0x40>
        {
            switch(DioPorts[PortId].PortNum)
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	fc 01       	movw	r30, r24
 166:	e0 5a       	subi	r30, 0xA0	; 160
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	41 f0       	breq	.+16     	; 0x180 <Dio_WritePort+0x36>
 170:	28 f0       	brcs	.+10     	; 0x17c <Dio_WritePort+0x32>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	39 f0       	breq	.+14     	; 0x184 <Dio_WritePort+0x3a>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	39 f0       	breq	.+14     	; 0x188 <Dio_WritePort+0x3e>
 17a:	08 95       	ret
            {
            case DIOA:
                PORTA = Level;
 17c:	6b bb       	out	0x1b, r22	; 27
                break;
 17e:	08 95       	ret
            case DIOB:
                PORTB = Level;
 180:	68 bb       	out	0x18, r22	; 24
                break;
 182:	08 95       	ret
            case DIOC:
                PORTC = Level;
 184:	65 bb       	out	0x15, r22	; 21
                break;
 186:	08 95       	ret
            case DIOD:
                PORTD = Level;
 188:	62 bb       	out	0x12, r22	; 18
 18a:	08 95       	ret

0000018c <Dio_FlipChannel>:
FUNC(Dio_LevelType, DIO_MEM_CLASS) Dio_FlipChannel( VAR( Dio_ChannelType, DIO_MEM_CLASS) ChannelId )
{
    Dio_LevelType Local_DioReturnResult = STD_LOW;
    volatile uint8_t * PortPtr = NULL;

    if ( ChannelId < DIO_CONFIGURED_CHANNELS )
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	08 f0       	brcs	.+2      	; 0x192 <Dio_FlipChannel+0x6>
 190:	4f c0       	rjmp	.+158    	; 0x230 <Dio_FlipChannel+0xa4>
    {
        switch(DioChannels[ChannelId].PortNum)
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e8 0f       	add	r30, r24
 19c:	f9 1f       	adc	r31, r25
 19e:	ec 59       	subi	r30, 0x9C	; 156
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	20 81       	ld	r18, Z
 1a4:	21 30       	cpi	r18, 0x01	; 1
 1a6:	41 f0       	breq	.+16     	; 0x1b8 <Dio_FlipChannel+0x2c>
 1a8:	80 f0       	brcs	.+32     	; 0x1ca <Dio_FlipChannel+0x3e>
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	41 f0       	breq	.+16     	; 0x1be <Dio_FlipChannel+0x32>
 1ae:	23 30       	cpi	r18, 0x03	; 3
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <Dio_FlipChannel+0x38>
 ************************************************************************************/
#if (DIO_FLIP_CHANNEL_API == STD_ON)
FUNC(Dio_LevelType, DIO_MEM_CLASS) Dio_FlipChannel( VAR( Dio_ChannelType, DIO_MEM_CLASS) ChannelId )
{
    Dio_LevelType Local_DioReturnResult = STD_LOW;
    volatile uint8_t * PortPtr = NULL;
 1b2:	a0 e0       	ldi	r26, 0x00	; 0
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <Dio_FlipChannel+0x42>
        {
        case DIOA:
            PortPtr = &PORTA;
            break;
        case DIOB:
            PortPtr = &PORTB;
 1b8:	a8 e3       	ldi	r26, 0x38	; 56
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
            break;
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <Dio_FlipChannel+0x42>
        case DIOC:
            PortPtr = &PORTC;
 1be:	a5 e3       	ldi	r26, 0x35	; 53
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
            break;
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <Dio_FlipChannel+0x42>
        case DIOD:
            PortPtr = &PORTD;
 1c4:	a2 e3       	ldi	r26, 0x32	; 50
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
            break;
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_FlipChannel+0x42>
    if ( ChannelId < DIO_CONFIGURED_CHANNELS )
    {
        switch(DioChannels[ChannelId].PortNum)
        {
        case DIOA:
            PortPtr = &PORTA;
 1ca:	ab e3       	ldi	r26, 0x3B	; 59
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
        default:
            /* No Action Required */
            break;
        }

        if ( IS_BIT_SET(*PortPtr, DioChannels[ChannelId].ChannelNum))
 1ce:	2c 91       	ld	r18, X
 1d0:	fc 01       	movw	r30, r24
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	8e 0f       	add	r24, r30
 1d8:	9f 1f       	adc	r25, r31
 1da:	fc 01       	movw	r30, r24
 1dc:	ec 59       	subi	r30, 0x9C	; 156
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	31 81       	ldd	r19, Z+1	; 0x01
 1e2:	82 2f       	mov	r24, r18
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	03 2e       	mov	r0, r19
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_FlipChannel+0x62>
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dio_FlipChannel+0x5e>
 1f2:	80 ff       	sbrs	r24, 0
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <Dio_FlipChannel+0x84>
        {
            CLEAR_BIT(*PortPtr, DioChannels[ChannelId].ChannelNum);
 1f6:	2c 91       	ld	r18, X
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <Dio_FlipChannel+0x76>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	3a 95       	dec	r19
 204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_FlipChannel+0x72>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8c 93       	st	X, r24
            Local_DioReturnResult = STD_LOW;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
        }
        else
        {
            SET_BIT(*PortPtr, DioChannels[ChannelId].ChannelNum);
 210:	2c 91       	ld	r18, X
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <Dio_FlipChannel+0x90>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	3a 95       	dec	r19
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Dio_FlipChannel+0x8c>
 220:	92 2f       	mov	r25, r18
 222:	98 2b       	or	r25, r24
 224:	9c 93       	st	X, r25
            SET_BIT(*PortPtr, DioChannels[ChannelId].ChannelNum);
 226:	9c 91       	ld	r25, X
 228:	89 2b       	or	r24, r25
 22a:	8c 93       	st	X, r24
            Local_DioReturnResult = STD_HIGH;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	08 95       	ret
    }
    else
    {
#if (DIO_DEV_ERROR_DETECT == STD_ON)
        /* Report Errors */
        Local_DioReturnResult = STD_LOW;
 230:	80 e0       	ldi	r24, 0x00	; 0
#endif
    }
    return Local_DioReturnResult;
}
 232:	08 95       	ret

00000234 <Init>:
#include "Dio_Regs.h"
void Init(void);

void Init(void)
{
	DDRC = 0xFF;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 238:	11 ba       	out	0x11, r1	; 17
	CLEAR_BIT(DDRA, 0);
 23a:	8a b3       	in	r24, 0x1a	; 26
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	8a bb       	out	0x1a, r24	; 26
	CLEAR_BIT(DDRA, 5);
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	8f 7d       	andi	r24, 0xDF	; 223
 244:	8a bb       	out	0x1a, r24	; 26
	CLEAR_BIT(DDRA, 7);
 246:	8a b3       	in	r24, 0x1a	; 26
 248:	8f 77       	andi	r24, 0x7F	; 127
 24a:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRB , 0);
 24c:	87 b3       	in	r24, 0x17	; 23
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	87 bb       	out	0x17, r24	; 23
 252:	08 95       	ret

00000254 <main>:
	
}

int main(void)
{
	Init();
 254:	0e 94 1a 01 	call	0x234	; 0x234 <Init>
	Dio_LevelType ChannelValue = 0;
	while(1)
	{	
		ChannelValue = Dio_ReadChannel(CHANNEL2);
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 41 00 	call	0x82	; 0x82 <Dio_ReadChannel>
		if  (STD_LOW == ChannelValue)
 25e:	81 11       	cpse	r24, r1
 260:	04 c0       	rjmp	.+8      	; 0x26a <main+0x16>
		{
			Dio_WritePort(PORT_ID0, 0xFF);
 262:	6f ef       	ldi	r22, 0xFF	; 255
 264:	0e 94 a5 00 	call	0x14a	; 0x14a <Dio_WritePort>
 268:	f7 cf       	rjmp	.-18     	; 0x258 <main+0x4>
		}
		else 
		{
			Dio_FlipChannel(CHANNEL1);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 c6 00 	call	0x18c	; 0x18c <Dio_FlipChannel>
 270:	f3 cf       	rjmp	.-26     	; 0x258 <main+0x4>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
