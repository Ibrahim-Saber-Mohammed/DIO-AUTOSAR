 /*********************************************************************/
 /****************** SWC : Dio.h             **************************/
 /****************** Version: V00            **************************/
 /****************** Date: Sep 21, 2022      **************************/
 /****************** Author: ibrahim.saber   **************************/
 /*********************************************************************/

#ifndef DIO_H_
#define DIO_H_

/* Include Std_types.h Files */
 /* SATISFY [SWS_Dio_00170] */
#include "Std_Types.h"
/* Include Dio_Cfg.h */
#include "Dio_Cfg.h"

/* Development Errors */

/* Invalid Channel Requested */
#define DIO_E_PARAM_INVALID_CHANNEL_ID      (0x0A)U
/* Invalid Port Requested    */
#define DIO_E_PARAM_INVALID_PORT_ID         (0x14)U
/* Invalid Channel Group Requested */
#define DIO_E_PARAM_INVALID_GROUP           (0x1F)U
/* API service called with a NULL pointer */
#define DIO_E_PARAM_POINTER                 (0x20)U

/* Type definition the Dio_ChannelType used by DIO APIs */
typedef uint8_t Dio_ChannelType;

/* Type definition the Dio_PortType used by DIO APIs */
typedef uint8_t Dio_PortType;

/* Type definition the Dio_LevelType used by DIO APIs */
typedef uint8_t Dio_LevelType;

/* Type definition the Dio_PortLevelType used by DIO APIs */
typedef uint8_t Dio_PortLevelType;

typedef uint8_t Dio_PinDirection;

typedef uint8_t Dio_PortDirection;
/* Definition of the possible channel ID */
#define CHANNEL0		( (Dio_ChannelType) 0U)
#define CHANNEL1		( (Dio_ChannelType) 1U)
#define CHANNEL2		( (Dio_ChannelType) 2U)
#define CHANNEL3		( (Dio_ChannelType) 3U)
#define CHANNEL4		( (Dio_ChannelType) 4U)
#define CHANNEL5		( (Dio_ChannelType) 5U)
#define CHANNEL6		( (Dio_ChannelType) 6U)
#define CHANNEL7		( (Dio_ChannelType) 7U)
#define CHANNEL8		( (Dio_ChannelType) 8U)
#define CHANNEL9		( (Dio_ChannelType) 9U)
#define CHANNEL10		( (Dio_ChannelType) 10U)
#define CHANNEL11		( (Dio_ChannelType) 11U)
#define CHANNEL12		( (Dio_ChannelType) 12U)
#define CHANNEL13		( (Dio_ChannelType) 13U)
#define CHANNEL14		( (Dio_ChannelType) 14U)
#define CHANNEL15		( (Dio_ChannelType) 15U)
#define CHANNEL16		( (Dio_ChannelType) 16U)
#define CHANNEL17		( (Dio_ChannelType) 17U)
#define CHANNEL18		( (Dio_ChannelType) 18U)
#define CHANNEL19		( (Dio_ChannelType) 19U)
#define CHANNEL20		( (Dio_ChannelType) 20U)
#define CHANNEL21		( (Dio_ChannelType) 21U)
#define CHANNEL22		( (Dio_ChannelType) 22U)
#define CHANNEL23		( (Dio_ChannelType) 23U)
#define CHANNEL24		( (Dio_ChannelType) 24U)
#define CHANNEL25		( (Dio_ChannelType) 25U)
#define CHANNEL26		( (Dio_ChannelType) 26U)
#define CHANNEL27		( (Dio_ChannelType) 27U)
#define CHANNEL28		( (Dio_ChannelType) 28U)
#define CHANNEL29		( (Dio_ChannelType) 29U)
#define CHANNEL30		( (Dio_ChannelType) 30U)
#define CHANNEL31		( (Dio_ChannelType) 31U)
#define CHANNEL32		( (Dio_ChannelType) 32U)

/* definition of the possible Port ID */
#define PORT_ID0	(Dio_PortType)(0U)
#define PORT_ID1	(Dio_PortType)(1U)
#define PORT_ID2	(Dio_PortType)(2U)
#define PORT_ID3	(Dio_PortType)(3U)
/* Type for the definition of a channel group, which consists of several adjoining
   channels within a port. */
typedef struct{
    /* This element mask which defines the positions of the channel group */
    uint32_t mask;
    /* This element shall be the position of the Channel Group on the port, counted from the LSB.  */
    uint8_t offset;
    /* This shall be the port on which the Channel group is defined. */
    Dio_PortType port;
}Dio_ChannelGroupType;

/***********************************************************************************************************
 * [FUNCTION NAME]      : Dio_ReadChannel
 * [DESCRIPTION]        : This function is used to read a specific Channel in the DIO
 * [ARGS]               :
 *                      in  -> ChannelId :
 *                                        The channel Id is the unique Id of the Channel generated by the
 *                                        Configuration tool
 *
 *                      out  -> Dio_LevelType:
 *                                             The return of this Function is the Channel level
 *                                           * STD_HIGH: The channel is HIGH i.e '1'
 *
 *                                           * STD_LOW : The Channel is LOW i.e '0
 *
 ***********************************************************************************************************/
FUNC(Dio_LevelType, DIO_MEM_CLASS) Dio_ReadChannel (VAR(Dio_ChannelType, DIO_MEM_CLASS) ChannelId);
/*Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId); */




/***********************************************************************************************************
 * [FUNCTION NAME]      : Dio_WriteChannel
 * [DESCRIPTION]        : This function is used to Write to a specific Channel in the DIO
 * [ARGS]               :
 *                      in  -> ChannelId :
 *                                        The channel Id is the unique Id of the Channel generated by the
 *                                        Configuration tool
 *
 *                      in  -> Level :
 *                                        The DIO Level to be written
 *                                        * STD_HIGH :
 *                                                      Write HIGH to the Channel i.e '1' 5V
 *
 *                                        STD_LOW   :
 *                                                      Write LOW to the Channel i.e '0' 0V
 *
 *
 ***********************************************************************************************************/
FUNC(void, DIO_MEM_CLASS) Dio_WriteChannel(VAR(Dio_ChannelType, DIO_MEM_CLASS) ChannelId , VAR(Dio_LevelType, DIO_MEM_CLASS) Level);

/***********************************************************************************************************
 * [FUNCTION NAME]      : Dio_ReadPort
 * [DESCRIPTION]        : This function is used to read a specific Port in the DIO
 * [ARGS]               :
 *                      in  -> PortId :
 *                                        The Port Id is the unique Id of the Port Number generated by the
 *                                        Configuration tool
 *
 *                      out  -> Dio_PortLevelType:
 *                                             The return of this Function is the Channel level
 *                                           * Dio_PortLevelType is a value in range 0 to 255
 *											 * The Dio_PortLevelType is uint8 as the Port in AVR is 8 bit width
 *
 ***********************************************************************************************************/
FUNC(Dio_PortLevelType, DIO_MEM_CLASS) Dio_ReadPort ( VAR(Dio_PortType, DIO_MEM_CLASS) PortId);

/***********************************************************************************************************
 * [FUNCTION NAME]      : Dio_WritePort
 * [DESCRIPTION]        : This function is used to write value to a specific Port in the DIO
 * [ARGS]               :
 *                      in  -> PortId :
 *                                        The Port Id is the unique Id of the Port Number generated by the
 *                                        Configuration tool.
 *						in  -> Level:
 *										  The Level is uint8 value in range (0 .. 255)
 *
 *                      out  -> void (None):
 *
 ***********************************************************************************************************/
FUNC(void, DIO_MEM_CLASS) Dio_WritePort( VAR(Dio_PortType, DIO_MEM_CLASS) PortId , VAR(Dio_PortLevelType, DIO_MEM_CLASS) Level);

/***********************************************************************************************************
 * [FUNCTION NAME]      : Dio_ReadChannelGroup
 * [DESCRIPTION]        : * This function is used to read a Channel Group of the Configured channel groups.
 *						  * Channel Groups is a collection of bits grouped together. 
 * [ARGS]               :
 *                      in  -> ChannelGroupIdPtr :
 *													Pointer to channel group structure.
 *													* The pointer is pointer to constant as it is not allowed to the function
 *													  to change any of the data of the structure (structure is generated by the tool)
 *
 *                      out  -> Dio_PortLevelType:
 *                                             The return of this Function is the Channel level
 *                                           * Dio_PortLevelType is a value in range 0 to 255
 *											 * The Dio_PortLevelType is uint8 as the Port in AVR is 8 bit width
 *
 ***********************************************************************************************************/
FUNC(Dio_PortLevelType, DIO_MEM_CLASS) Dio_ReadChannelGroup( P2CONST( Dio_ChannelGroupType, DIO_MEM_CLASS , DIO_PTR_CLASS) ChannelGroupIdPtr);


/***********************************************************************************************************
 * [FUNCTION NAME]      : Dio_WriteChannelGroup
 * [DESCRIPTION]        : * This function is used to write to  a Channel Group of the Configured channel groups.
 *						  * Channel Groups is a collection of bits grouped together. 
 * [ARGS]               :
 *                      in  -> ChannelGroupIdPtr :
 *													Pointer to channel group structure.
 *													* The pointer is pointer to constant as it is not allowed to the function
 *													  to change any of the data of the structure (structure is generated by the tool)
 *
 *						in	-> Level	:
 *											* The value to be written to the channel group.
 *
 *                      out  -> void (None)
 *                                             
 ***********************************************************************************************************/
FUNC(void, DIO_MEM_CLASS) Dio_WriteChannelGroup( P2CONST(Dio_ChannelGroupType, DIO_MEM_CLASS , DIO_PTR_CLASS )ChannelGroupId , VAR(Dio_PortLevelType, DIO_MEM_CLASS) Level);

FUNC(Dio_LevelType, DIO_MEM_CLASS) Dio_FlipChannel( VAR( Dio_ChannelType, DIO_MEM_CLASS) ChannelId );

FUNC(void, DIO_MEM_CLASS) Dio_MaskedWritePort( VAR(Dio_PortType, DIO_MEM_CLASS) PortId, VAR(Dio_PortLevelType, DIO_MEM_CLASS) Level, VAR(Dio_PortLevelType, DIO_MEM_CLASS) Mask);

#endif /* DIO_H_ */
